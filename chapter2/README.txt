Structs and Arrays Puzzle
From this program I've made,this is a program that can let the user to input a variety of puzzle and finally operate whether the puzzle can be mixed together or not. 	First of all, user needs to input a integer nuber which stands for the puzzle test cases, while each of the test cases has two puzzle. 	A puzzle is made of nine puzzle. 	Here I will say the nine puzzle that is called nine spot. 	While input the puzzle one by one, each of the puzzle must be made of three by three matrix which is in digital number. 	Also, the puzzle is only made of following number:0, 1, and 2. 	The number 0 represent that there is not any spot on the position in the puzzle that user input. 	The number 1 represent that it is a spot which cannot be moved including up, down, right, and left or even spin in the puzzle. 	The number 2 represent that it is the spot which can be moved, and spin. 	User has to input the puzzle in the format of three by three matrix. 	Each of the number does not need the space cause that the program will scan the number as character in one-by-one way. 	After inputting the puzzle, the program will start to operate. 	In the code I've design, each of the puzzle which users enter will be assign to the struct I've made. 	The input of each spot in the three by three matrix which user input will automatically assign to the struct value as well as the spot's position in each puzzle will also be counted and memorized in memory with systemically.  	After memorizing all of the spot for each puzzle, the program will start to certify whether the puzzle including immovable puzzle and movable puzzle can be mixed successfully. 	In order to test whether the immovable puzzle and movable puzzle can mixed together or not, I've already programmed the function that can make the movable move in differevt ways. 	The function I've made can let each of the spot of the movable puzzle move up one row from original position, also can make it move down. 	There are another function that can make the spot of the movable puzzle shift right or left. 	Beside,there is also a function that can rotate the spot in angel of 90, 180, and 270. 	In each of the function, there is a mechanism that can judge the spot of the movable whether move out from the matrix boundary. If so, it will turn back to the present position. 	In each type of the movable that user input, I've noticed that there is a way to detect all of the position which the puzzle can change. 	Regardless of the movable shape, all of the spot will be initialize to the most left in column and most down in the row of the matrix as well as each of the moving will be accomponied with a function which name in judgment_puzzle in order to test whether the movable puzzle is mixed with the immovable puzzle or not, If so, it will show YES in the output with the mix puzzle, otherwise, it will begin to another way.	The another way is to start moving and rotate. 	After several times I've thinking, I've made that a special way to test. 	For each of the position of spot of the movable puzzle which has already been initialized, the step is the way which is up, up, right, right, down, down, left, left, up, up, and translate. 	Each of the moving or rotation will be companied with the function judgment_puzzle to certify whether it is mixed with immovable.	The times of moving is twice is because that we cannot confirm whether the number of the spot is one or two or even more. 	In order to find a way that including all of the possible situation, the minimum enter of the spot is one and also has the most way to move. 	The puzzle with only one spot in matrix move has the number of 3 of the ways. 	As a result, each of the moving has to move twice times to ensure that the spot will arrive at the matrix boundary. After moving all of the present function, if the movable puzzle is'nt mixed with movable puzzle. It will rotate in angle of 90 with clockwise. A step that have up, down, right, and left for each of twice times as long as one rotate is called one trying. A cycle is made of present four trying. 	It is because that the vertical spot of the movable has the most different type to rotate for totally four times. 	For each different type of rotation, it also have the chance to meet the mixed type with immovable puzzle. As a result, each different type of rotation has the chance with the present moving function.	All in all, a cycle is made up of four times of following trying: two up, two right, two down, two left, two up and with one rotate.	If a cycle had been done and had not pass the judgment_puzzle function, then the movable puzzle the user input cannot mixed with the movable puzzle. Finally the program will print NO in the output. As the number of the test cases is reaching limit, the program will be closed.
407235049 CCU CSIE 2B Pang-Mao-Hsiang龎懋翔